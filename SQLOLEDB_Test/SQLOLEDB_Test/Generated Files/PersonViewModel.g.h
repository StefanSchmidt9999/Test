// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#include "winrt/SQLOLEDB_Test.h"
namespace winrt::SQLOLEDB_Test::implementation
{
    template <typename D, typename... I>
    struct WINRT_IMPL_EMPTY_BASES PersonViewModel_base : implements<D, SQLOLEDB_Test::PersonViewModel, I...>
    {
        using base_type = PersonViewModel_base;
        using class_type = SQLOLEDB_Test::PersonViewModel;
        using implements_type = typename PersonViewModel_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"SQLOLEDB_Test.PersonViewModel";
        }
    };
}
namespace winrt::SQLOLEDB_Test::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_IMPL_EMPTY_BASES PersonViewModelT : implements<D, winrt::Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = SQLOLEDB_Test::PersonViewModel;

        hstring GetRuntimeClassName() const
        {
            return L"SQLOLEDB_Test.PersonViewModel";
        }
        auto ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_PERSONVIEWMODEL_XAML_G_H) || __has_include("PersonViewModel.xaml.g.h")

#include "PersonViewModel.xaml.g.h"

#else

namespace winrt::SQLOLEDB_Test::implementation
{
    template <typename D, typename... I>
    using PersonViewModelT = PersonViewModel_base<D, I...>;
}

#endif
